<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:jee="http://www.springframework.org/schema/jee" 
	xsi:schemaLocation="
	 http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/context 
     http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/jee
     http://www.springframework.org/schema/jee/spring-jee-2.0.xsd"
	default-lazy-init="true">
	
	<!-- Root Context: defines shared resources visible to all other web components classpath:configuration.properties  -->
	<bean class="com.blog.frame.spring.SpringPropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- classpath 只加载第一个找到的文件 -->
				<value>classpath:configuration.properties</value>
				<!-- classpath* 能从多个jar中加载相同的文件
				<value>classpath*:META-INF/config/framework.properties</value>
				 -->
			</list>
		</property>
	</bean>
	<!--
	<jee:jndi-lookup id="MyDataSource" jndi-name="java:comp/env/jdbc/ireewrite"/>
	
	 jndi 
	<bean id="MyDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">  
        <property name="jndiName">  
            <value>java:comp/env/jdbc/ireewrite</value>  
        </property>  
    </bean>
	-->
	<!-- DBCP数据源 
	<bean id="MyDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" >
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="maxWait" value="${dbcp.maxWait}" />
	</bean>
	-->
	
	 <!-- alibaba druid数据源 -->
	 	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		    <property name="resultSetLogEnabled" value="true" />
		</bean>
	   <bean id="MyDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	     <!-- 基本属性 url、user、password --> 
	      <property name="url" value="${jdbc.url}" />
	      <property name="username" value="${jdbc.username}" />
	      <property name="password" value="${jdbc.password}" />
	
	      <!-- 配置初始化大小、最小、最大 -->
	      <property name="initialSize" value="5" />
	      <property name="minIdle" value="5" /> 
	      <property name="maxActive" value="${dbcp.maxActive}" />
	
	      <!-- 配置获取连接等待超时的时间 --> 
	      <property name="maxWait" value="${dbcp.maxWait}" />
	
	      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
	      <property name="timeBetweenEvictionRunsMillis" value="60000" />
	
	      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
	      <property name="minEvictableIdleTimeMillis" value="300000" />
	
	      <property name="validationQuery" value="SELECT 'x'" />
	      <property name="testWhileIdle" value="true" />
	      <property name="testOnBorrow" value="false" />
	      <property name="testOnReturn" value="false" />
	
	      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
	      <property name="poolPreparedStatements" value="true" />
	      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	
	      <!-- 配置监控统计拦截的filters --> 
	      <property name="filters" value="stat,log4j" /> 
	      <property name="proxyFilters">
	        <list>
	            <ref bean="log-filter"/>
	        </list>
	    </property>
	  </bean>
	  
	 
	<bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="configLocation" value="classpath:/META-INF/mybatis/mybatisTypeAliases.xml" />  
	    <property name="dataSource" ref="MyDataSource" />
	    <property name="mapperLocations" value="classpath:/META-INF/mybatis/**/*Mapper.xml"/>
	</bean>
	
	<!-- SqlSessionTemplate -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> 
	  <constructor-arg index="0" ref="SqlSessionFactory" />  
	  <!-- <constructor-arg index="1" value="BATCH" />如果想要进行批量操作可加入这个属性 -->
	</bean>
	
	<!-- 注册事务管理类-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="MyDataSource"/>
	</bean>
    <!-- 开启事务行为 -->
  	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
	 <!-- 扫描指定包下面有@Component @Controller@Service等注解的类，并把这些类注册为bean，多个包用逗号分隔 --> 	
  	<context:component-scan base-package="com.blog" />
  	<!-- spring bean 管理者 -->
  	<bean id="springBeanHolder" class="com.blog.frame.spring.SpringBeanHolder" lazy-init="false" />
  	
</beans>
